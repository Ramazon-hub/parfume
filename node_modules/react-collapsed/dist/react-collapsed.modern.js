import{useState as e,useRef as n,useCallback as t,useEffect as o,useLayoutEffect as r}from"react";import{flushSync as l}from"react-dom";import i from"raf";import a from"tiny-warning";function s(){return s=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},s.apply(this,arguments)}function c(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)n.indexOf(t=l[o])>=0||(r[t]=e[t]);return r}const d=()=>{};function p(e){return null!=e&&e.current?e.current.scrollHeight:(a(!0,"useCollapse was not able to find a ref to the collapse element via `getCollapseProps`. Ensure that the element exposes its `ref` prop. If it exposes the ref prop under a different name (like `innerRef`), use the `refKey` property to change it. Example:\n\n{...getCollapseProps({refKey: 'innerRef'})}"),"auto")}const u=(...e)=>(...n)=>e.forEach(e=>e&&e(...n));function f(...e){return e.every(e=>null==e)?null:n=>{e.forEach(e=>{!function(e,n){if(null!=e)if("function"==typeof e)e(n);else try{e.current=n}catch(t){throw new Error(`Cannot assign value "${n}" to ref "${e}"`)}}(e,n)})}}const h="undefined"!=typeof window?r:o;let g=!1,m=0;const x=()=>++m,y=["duration","easing","collapseStyles","expandStyles","onExpandStart","onExpandEnd","onCollapseStart","onCollapseEnd","isExpanded","defaultExpanded","hasDisabledAnimation"],E=["disabled","onClick"],b=["style","onTransitionEnd","refKey"],C="cubic-bezier(0.4, 0, 0.2, 1)";function w(r={}){let{duration:m,easing:w=C,collapseStyles:v={},expandStyles:S={},onExpandStart:k=d,onExpandEnd:$=d,onCollapseStart:O=d,onCollapseEnd:P=d,isExpanded:T,defaultExpanded:D=!1,hasDisabledAnimation:K=!1}=r,j=c(r,y);const[N,z]=function(r,l){const[i,s]=e(l||!1),c=n(null!=r),d=c.current?r:i,p=t(e=>{c.current||s(e)},[]);return o(()=>{a(!(c.current&&null==r),"useCollapse is changing from controlled to uncontrolled. useCollapse should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop."),a(!(!c.current&&null!=r),"useCollapse is changing from uncontrolled to controlled. useCollapse should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled collapse for the lifetime of the component. Check the `isExpanded` prop.")},[r]),[d,p]}(T,D),A=function(n){const t=g?x():null,[r,l]=e(t);return h(()=>{null===r&&l(x())},[]),o(()=>{!1===g&&(g=!0)},[]),null!=r?String(r):void 0}(),H=n(null);!function(e){let n=e=>{};"production"!==process.env.NODE_ENV&&(n=e=>{if(null==e||!e.current)return;const{paddingTop:n,paddingBottom:t}=window.getComputedStyle(e.current);a(!(n&&"0px"!==n||t&&"0px"!==t),"react-collapsed: Padding applied to the collapse element will cause the animation to break and not perform as expected. To fix, apply equivalent padding to the direct descendent of the collapse element.")}),o(()=>{n(e)},[e])}(H);const I=`${j.collapsedHeight||0}px`,R={display:"0px"===I?"none":"block",height:I,overflow:"hidden"},[q,B]=e(N?{}:R),M=e=>{l(()=>{B(e)})},V=e=>{M(n=>s({},n,e))};function _(e){if(K)return{};const n=m||function(e){if(!e||"string"==typeof e)return 0;const n=e/36;return Math.round(10*(4+15*n**.25+n/5))}(e);return{transition:`height ${n}ms ${w}`}}!function(e,t){const r=n(!0);o(()=>{r.current?r.current=!1:i(N?()=>{k(),V(s({},S,{willChange:"height",display:"block",overflow:"hidden"})),i(()=>{const e=p(H);V(s({},_(e),{height:e}))})}:()=>{O();const e=p(H);V(s({},v,_(e),{willChange:"height",height:e})),i(()=>{V({height:I,overflow:"hidden"})})})},t)}(0,[N]);const F=e=>{if(e.target===H.current&&"height"===e.propertyName)if(N){const e=p(H);e===q.height?M({}):V({height:e}),$()}else q.height===I&&(M(R),P())};return{getToggleProps:function(e={}){let{disabled:n=!1,onClick:t=d}=e,o=c(e,E);return s({type:"button",role:"button",id:`react-collapsed-toggle-${A}`,"aria-controls":`react-collapsed-panel-${A}`,"aria-expanded":N,tabIndex:0,disabled:n},o,{onClick:n?d:u(t,()=>z(e=>!e))})},getCollapseProps:function(e={}){let{style:n={},onTransitionEnd:t=d,refKey:o="ref"}=e,r=c(e,b);return s({id:`react-collapsed-panel-${A}`,"aria-hidden":!N},r,{[o]:f(H,r[o]),onTransitionEnd:u(F,t),style:s({boxSizing:"border-box"},n,q)})},isExpanded:N,setExpanded:z}}export{w as default};
//# sourceMappingURL=react-collapsed.modern.js.map
